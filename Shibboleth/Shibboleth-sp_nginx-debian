#!/bin/bash
# Tested on Debian GNU/Linux 8.8 (jessie)

# it displays executed commands on stdout
set -x

# stop execution if some commands returns error (1|2)
set -e

NGINX_VER=1.10.3
SP_HOSTNAME=nginx-sp.testunical.it
TEST_FILE=/etc/shibboleth/,\
/usr/lib/x86_64-linux-gnu/shibboleth/

# shibd dependencies
aptitude install libmemcached11 libodbc1 shibboleth-sp2-common shibboleth-sp2-utils libshibsp6 libshibsp-plugins 

# there will be something to compile over there
#aptitude install build-essential zlib1g-dev libpcre3 libpcre3-dev unzip libssl-dev fakeroot

apt-get build-dep nginx

# test presence of files
for i in $(echo $TEST_FILE | sed "s/,/ /g"); 
do 
    # directory exists?
    if [ ! -d $i ]; then
        echo "$i not found!" && exit 1
    fi
done

# shibboleth setup is then finished
sudo systemctl restart shibd.service

############
# SUPERVISOR
############

# Create a configuration file for supervisor:
aptitude install supervisor

# check if _shibd unix group exists first
echo "
[fcgi-program:shibauthorizer]
command=/usr/lib/x86_64-linux-gnu/shibboleth/shibauthorizer
socket=unix:///var/run/shibboleth/shibauthorizer.sock
socket_owner=_shibd:_shibd
socket_mode=0666
user=_shibd
stdout_logfile=/var/log/supervisor/shibauthorizer.log
stderr_logfile=/var/log/supervisor/shibauthorizer.error.log

[fcgi-program:shibresponder]
command=/usr/lib/x86_64-linux-gnu/shibboleth/shibresponder
socket=unix:///var/run/shibboleth/shibresponder.sock
socket_owner=_shibd:_shibd
socket_mode=0666
user=_shibd
stdout_logfile=/var/log/supervisor/shibresponder.log
stderr_logfile=/var/log/supervisor/shibresponder.error.log
" > /etc/supervisor/conf.d/shib.conf

# restart supervisor
sudo service supervisor restart

############
# NGINX with shib patch
############

# recompile nginx for integrating shib module
# https://serversforhackers.com/compiling-third-party-modules-into-nginx

# download third part modules
# ngx_headers_more - Set and clear input and output headers...more than "add"!
git clone https://github.com/openresty/headers-more-nginx-module.git

# nginx-shib
git clone https://github.com/nginx-shib/nginx-http-shibboleth

# nginx 1.9.11 supports dynamic module
# ...but only Debian testing have nginx > 1.10
# this scripts compile nginx 1.10 from scratch, hopefully usefull for Debian 7 and 8

wget http://nginx.org/download/nginx-$NGINX_VER.tar.gz
tar -xzvf nginx-$NGINX_VER.tar.gz
cd nginx-$NGINX_VER

./configure --sbin-path=/usr/sbin/nginx \
 --conf-path=/etc/nginx/nginx.conf \
 --pid-path=/run/nginx.pid \
 --error-log-path=/var/log/nginx/error.log \
 --http-log-path=/var/log/nginx/access.log \
 --with-http_ssl_module \
 --add-module=../nginx-http-shibboleth \
 --add-module=../headers-more-nginx-module \
 --with-ipv6

###########
# NGINX Installation
###########
make
make install
sudo adduser --system --no-create-home --disabled-login --disabled-password --group nginx

mkdir -p /opt/nginx-modules/shib
cp objs/addon/nginx-http-shibboleth/ngx_http_shibboleth_module.o /opt/nginx-modules/shib/
cp -Rp ../nginx-http-shibboleth/includes /opt/nginx-modules/shib/

###########
# NGINX build DEB
###########
# http://nginx.org/en/linux_packages.html
# This section needs to be emproved!

# apt-get source nginx
# copy ./debian folder to your nginx source folder, then

# First edit debian/changelog and add your dbrand new definition at the top of it
# The next file we need to edit is: debian/control, just update the maintainer and uploader to your own information.
# Almost done, now edit the file debian/rules and change the configure options to suit your sites needs.
#Feel free to edit any of the default configurations under debian/conf/ before running the final command.
# remove ./debian/patches/* because they are referred to old nginx debian setup

# then
#cp ../nginx-$NGINX_VER.tar.gz ../nginx_$NGINX_VER.orig.tar.gz
#dpkg-buildpackage -us -uc

############
# NGINX configuration
############

# if you have not a backup/legacy/preexistent configuration you can move server {} definition from nginx.conf and add
	##
	# Virtual Host Configs
	##

    # uncomment the following lines 
	#include /etc/nginx/conf.d/*.conf;
	#include /etc/nginx/sites-enabled/*;
    
# then put that serrver {} definition in a file called default in sites-available. You should also link it in sites-enabled
# keep also in mind to change execution user, from nobody (commented in nginx.conf) to the previously created nginx

############
# NGINX systemd
############

echo "
[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target
" > /lib/systemd/system/nginx.service

# put ssl certificate, avoids
# no "ssl_certificate" is defined in server listening on SSL port while SSL handshaking
# must be created from IDP CA and then copied to sp's nginx
# TODO

# configure nginx virtual server
# TODO

# reload and restart 
systemctl daemon-reload 
systemctl enable nginx
systemctl start nginx

###########
# Configure Shibboleth SP
###########

/usr/sbin/shib-keygen -f -h $SP_HOSTNAME -e https://$SP_HOSTNAME/shibboleth 
# writing new private key to '/etc/shibboleth/sp-key.pem'

mkdir /etc/shibboleth/metadata
cd  /etc/shibboleth/metadata
# copy idp.testunical.it-metadata.xml in it !
wget --no-check-certificate https://idp.testunical.it/idp/shibboleth -O idp.testunical.it-metadata.xml

# edit /etc/shibboleth/shibboleth2.xml like 
# https://github.com/peppelinux/ansible-Debian8-shibboleth-IDP-SP/blob/master/roles/mod-shib2/templates/shibboleth2.xml

# Configure Shibboleth SP Attribute Map
# copy https://github.com/peppelinux/ansible-Debian8-shibboleth-IDP-SP/blob/master/roles/mod-shib2/files/attribute-map.xml
# to
# /etc/shibboleth/attribute-map.xml

# Add SP {{ sp_fqdn }} Metadata to Shibboleth IdP
### TODO
